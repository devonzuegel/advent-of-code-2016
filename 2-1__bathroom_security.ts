import { cmp } from './test_utils'
import {
  getLocations,
  getDigitIndices,
  instructionsToPassword,
  EXAMPLE_INPUT,
  getSteps,
  Location,
} from './2__bathroom_security'

const INITIAL_LOC = { x: 0, y: 0 }
const CHALLENGE_INPUT = [
  'LRRLLLRDRURUDLRDDURULRULLDLRRLRLDULUDDDDLLRRLDUUDULDRURRLDULRRULDLRDUDLRLLLULDUURRRRURURULURRULRURDLULURDRDURDRLRRUUDRULLLLLDRULDDLLRDLURRLDUURDLRLUDLDUDLURLRLDRLUDUULRRRUUULLRDURUDRUDRDRLLDLDDDLDLRRULDUUDULRUDDRLLURDDRLDDUDLLLLULRDDUDDUUULRULUULRLLDULUDLLLLURRLDLUDLDDLDRLRRDRDUDDDLLLLLRRLLRLUDLULLDLDDRRUDDRLRDDURRDULLLURLRDLRRLRDLDURLDDULLLDRRURDULUDUDLLLDDDLLRLDDDLLRRLLURUULULDDDUDULUUURRUUDLDULULDRDDLURURDLDLULDUDUDDDDD',
  'RUURUDRDUULRDDLRLLLULLDDUDRDURDLRUULLLLUDUDRRUDUULRRUUDDURDDDLLLLRRUURULULLUDDLRDUDULRURRDRDLDLDUULUULUDDLUDRLULRUDRDDDLRRUUDRRLULUULDULDDLRLURDRLURRRRULDDRLDLLLRULLDURRLUDULDRDUDRLRLULRURDDRLUDLRURDDRDULUDLDLLLDRLRUDLLLLLDUDRDUURUDDUDLDLDUDLLDLRRDLULLURLDDUDDRDUDLDDUULDRLURRDLDLLUUDLDLURRLDRDDLLDLRLULUDRDLLLDRLRLLLDRUULUDLLURDLLUURUDURDDRDRDDUDDRRLLUULRRDRULRURRULLDDDUDULDDRULRLDURLUDULDLDDDLRULLULULUDLDDRDLRDRDLDULRRLRLRLLLLLDDDRDDULRDULRRLDLUDDDDLUDRLLDLURDLRDLDRDRDURRDUDULLLDLUDLDRLRRDDDRRLRLLULDRLRLLLLDUUURDLLULLUDDRLULRDLDLDURRRUURDUDRDLLLLLLDDDURLDULDRLLDUDRULRRDLDUDRLLUUUDULURRUR',
  'URRRLRLLDDDRRLDLDLUDRDRDLDUDDDLDRRDRLDULRRDRRDUDRRUUDUUUDLLUURLRDRRURRRRUDRLLLLRRDULRDDRUDLRLUDURRLRLDDRRLUULURLURURUDRULDUUDLULUURRRDDLRDLUDRDLDDDLRUDURRLLRDDRDRLRLLRLRUUDRRLDLUDRURUULDUURDRUULDLLDRDLRDUUDLRLRRLUDRRUULRDDRDLDDULRRRURLRDDRLLLRDRLURDLDRUULDRRRLURURUUUULULRURULRLDDDDLULRLRULDUDDULRUULRRRRRLRLRUDDURLDRRDDULLUULLDLUDDDUURLRRLDULUUDDULDDUULLLRUDLLLRDDDLUUURLDUDRLLLDRRLDDLUDLLDLRRRLDDRUULULUURDDLUR',
  'UULDRLUULURDRLDULURLUDULDRRDULULUDLLDURRRURDRLRLLRLDDLURRDLUUDLULRDULDRDLULULULDDLURULLULUDDRRULULULRDULRUURRRUDLRLURDRURDRRUDLDDUURDUUDLULDUDDLUUURURLRRDLULURDURRRURURDUURDRRURRDDULRULRRDRRDRUUUUULRLUUUDUUULLRRDRDULRDDULDRRULRLDLLULUUULUUDRDUUUDLLULDDRRDULUURRDUULLUUDRLLDUDLLLURURLUDDLRURRDRLDDURLDLLUURLDUURULLLRURURLULLLUURUUULLDLRDLUDDRRDDUUDLRURDDDRURUURURRRDLUDRLUULDUDLRUUDRLDRRDLDLDLRUDDDDRRDLDDDLLDLULLRUDDUDDDLDDUURLDUDLRDRURULDULULUDRRDLLRURDULDDRRDLUURUUULULRURDUUDLULLURUDDRLDDUDURRDURRUURLDLLDDUUDLLUURDRULLRRUUURRLLDRRDLURRURDULDDDDRDD',
  'LLRUDRUUDUDLRDRDRRLRDRRUDRDURURRLDDDDLRDURDLRRUDRLLRDDUULRULURRRLRULDUURLRURLRLDUDLLDULULDUUURLRURUDDDDRDDLLURDLDRRUDRLDULLRULULLRURRLLURDLLLRRRRDRULRUDUDUDULUURUUURDDLDRDRUUURLDRULDUDULRLRLULLDURRRRURRRDRULULUDLULDDRLRRULLDURUDDUULRUUURDRRLULRRDLDUDURUUUUUURRUUULURDUUDLLUURDLULUDDLUUULLDURLDRRDDLRRRDRLLDRRLUDRLLLDRUULDUDRDDRDRRRLUDUDRRRLDRLRURDLRULRDUUDRRLLRLUUUUURRURLURDRRUURDRRLULUDULRLLURDLLULDDDLRDULLLUDRLURDDLRURLLRDRDULULDDRDDLDDRUUURDUUUDURRLRDUDLRRLRRRDUULDRDUDRLDLRULDL',
]

const onBoard = ({ x, y }: Location): boolean =>
  Math.abs(x) <= 1 && Math.abs(y) <= 1

const coordinateToNum = ({ x, y }: Location): number =>
  ((x + 1) % 3) + ((1 - y) * 3) + 1

const TESTS = [
  [ coordinateToNum({ x: -1,  y:  1 }), 1 ],
  [ coordinateToNum({ x:  0,  y:  1 }), 2 ],
  [ coordinateToNum({ x:  1,  y:  1 }), 3 ],
  [ coordinateToNum({ x: -1,  y:  0 }), 4 ],
  [ coordinateToNum({ x:  0,  y:  0 }), 5 ],
  [ coordinateToNum({ x:  1,  y:  0 }), 6 ],
  [ coordinateToNum({ x: -1,  y: -1 }), 7 ],
  [ coordinateToNum({ x:  0,  y: -1 }), 8 ],
  [ coordinateToNum({ x:  1,  y: -1 }), 9 ],
  [
    getSteps(EXAMPLE_INPUT),
    ['U', 'L', 'L', 'R', 'R', 'D', 'D', 'D', 'L', 'U', 'R', 'D', 'L', 'U', 'U', 'U', 'U', 'D']
  ], [
    getLocations(['U', 'U', 'U'], INITIAL_LOC, onBoard),
    [
      { x: 0, y: 0 },
      { x: 0, y: 1 },
      { x: 0, y: 1 },
      { x: 0, y: 1 },
    ]
  ], [
    getLocations(['U', 'R', 'D', 'L'], INITIAL_LOC, onBoard),
    [
      { x: 0, y: 0 },
      { x: 0, y: 1 },
      { x: 1, y: 1 },
      { x: 1, y: 0 },
      { x: 0, y: 0 },
     ]
  ], [
    getLocations(['U', 'R', 'D', 'L'], INITIAL_LOC, onBoard).map(coordinateToNum),
    [ 5, 2, 3, 6, 5 ]
  ], [
    getLocations(['U', 'U', 'U', 'U'], INITIAL_LOC, onBoard).map(coordinateToNum),
    [ 5, 2, 2, 2, 2 ]
  ], [
    getDigitIndices(EXAMPLE_INPUT),
    [3, 8, 13, 18]
  ], [
    getDigitIndices(['x', 'x', 'x', 'x']),
    [1, 2, 3, 4]
  ], [
    getDigitIndices(['xx', 'xx', 'xx', 'xx']),
    [2, 4, 6, 8]
  ], [
    instructionsToPassword(EXAMPLE_INPUT, coordinateToNum, INITIAL_LOC, onBoard),
    "1985",
  ], [
    instructionsToPassword(CHALLENGE_INPUT, coordinateToNum, INITIAL_LOC, onBoard),
    "73597",
  ],
]

TESTS.map(test => cmp(test[0], test[1]))
